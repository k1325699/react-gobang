{"version":3,"sources":["components/App/App.js","reportWebVitals.js","index.js"],"names":["Game","styled","div","GameInfo","h1","PlayerP","p","Board","SquareWrapper","SquareButton","Piece","WhitePiece","WinnerMask","winner","handleRestart","MaskWrapper","WinnerInfo","Restart","onClick","Square","squares","handleAddChess","handleClick","e","target","getAttribute","map","square","index","App","useState","Array","fill","setSquares","round","setRound","setWinner","countTotal","id","color","directionX","directionY","total","tempX","Math","floor","tempY","calculateWin","newSquares","JSON","parse","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8595352f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Game = styled.div`\r\n  margin: 0 auto;\r\n  margin-top:20px;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  width: 1024px;\r\n  display: flex;\r\n`\r\nconst GameInfo = styled.h1`\r\n  line-height: 1.5;\r\n  font-size: 36px;\r\n  text-align: center;\r\n  flex:1;\r\n`\r\nconst PlayerP = styled.p`\r\n  font-weight: bold;\r\n  color:#d2b976;\r\n`\r\nconst Board = styled.div`\r\ndisplay: flex;\r\njustify-content: center;\r\n`\r\n\r\nconst SquareWrapper = styled.div`\r\nbackground: #ecd086;\r\ndisplay: flex;\r\nflex-wrap: wrap;\r\nwidth: 766px;\r\nborder: 3px solid #000;\r\n`\r\nconst SquareButton = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width:40px;\r\n  height: 40px;\r\n  border: 1px solid #000;\r\n  cursor: pointer;\r\n`\r\nconst Piece = styled.div`\r\nborder-radius: 50%;\r\nwidth: 60%;\r\nheight: 60%;\r\nbackground: #000;\r\nbox-shadow: 2px 2px 4px #171717c7;\r\n`\r\nconst WhitePiece = styled.div`\r\nborder-radius: 50%;\r\nwidth: 60%;\r\nheight: 60%;\r\nbackground: #fff;\r\nbox-shadow: 2px 2px 4px #e1e1e1d9;\r\n`\r\nfunction WinnerMask({winner,handleRestart}){\r\n  return(\r\n    <MaskWrapper>\r\n      <WinnerInfo>{winner}   win</WinnerInfo>\r\n      <Restart onClick={handleRestart}>重新開始~</Restart>\r\n    </MaskWrapper>\r\n  )\r\n}\r\nconst MaskWrapper = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  background: rgba(0,0,0,0.8);\r\n  z-index: 100;\r\n  color: #fff;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\nconst WinnerInfo = styled.h1`\r\n  font-weight: bold;\r\n  font-size: 60px;\r\n  margin-bottom: 40px;\r\n  white-space: pre-wrap;\r\n`\r\nconst Restart = styled.p`\r\n  font-size: 24px;\r\n  cursor: pointer;\r\n`\r\nfunction Square({squares,handleAddChess}){\r\n  const handleClick = (e) =>{\r\n    handleAddChess(e.target.getAttribute(\"data-id\"))\r\n  }\r\n  return (\r\n    <SquareWrapper>\r\n      {squares.map((square,index)=>\r\n      <SquareButton data-id={index} key ={index} onClick={handleClick}>\r\n        {square === \"white\"&&<WhitePiece/>}\r\n        {square === \"black\"&&<Piece/>}\r\n      </SquareButton>)}\r\n    </SquareWrapper>\r\n  )\r\n}\r\n\r\nfunction App() {\r\n  const [squares, setSquares] = useState(Array(19*19).fill(null))\r\n  const [round,setRound] = useState('white')\r\n  const [winner,setWinner] = useState(null)\r\n\r\n  const countTotal = (id,color,directionX, directionY) =>{\r\n    let total = 0\r\n    let tempX = Math.floor(id/19)\r\n    let tempY = id%19\r\n    do{\r\n      tempX+=directionX\r\n      tempY+=directionY\r\n      if(squares[19*tempX+tempY]===color){\r\n        total++\r\n      }else{\r\n        break\r\n      }\r\n    }while(id<361)\r\n    return total\r\n  }\r\n  const calculateWin = (id,color)=> {\r\n    if(countTotal(id,color,1,0)+countTotal(id,color,-1,0)>=4||\r\n    countTotal(id,color,0,-1)+countTotal(id,color,0,1)>=4||\r\n    countTotal(id,color,1,1)+countTotal(id,color,-1,-1)>=4||\r\n    countTotal(id,color,1,-1)+countTotal(id,color,-1,1)>=4\r\n    ){\r\n      setWinner(color)\r\n    }else{\r\n      setWinner(null)\r\n    }\r\n    }\r\n  const handleAddChess = (id) => {\r\n    if (winner!==null||squares[id]!==null) return\r\n    const newSquares = JSON.parse(JSON.stringify(squares))\r\n    if(round===\"white\"){\r\n      newSquares[id]=\"white\"\r\n      setRound('black')\r\n      calculateWin(id,\"white\")\r\n    }else{\r\n      newSquares[id]=\"black\"\r\n      setRound('white')\r\n      calculateWin(id,\"black\")\r\n    }\r\n    setSquares(newSquares)\r\n  }\r\n  // useEffect(()=>{\r\n\r\n  // },[squares,winner])\r\n  const handleRestart = ()=>{\r\n    setSquares(Array(19*19).fill(null))\r\n    setRound('white')\r\n    setWinner(null)\r\n  }\r\n\r\n  return (\r\n    <Game>\r\n      {winner!==null&&\r\n      <WinnerMask winner={winner} handleRestart={handleRestart}/>}\r\n        <GameInfo>\r\n          next player:\r\n          {winner===null&&<PlayerP>{round}</PlayerP>}\r\n        </GameInfo>\r\n      <Board>\r\n        <Square squares={squares} handleAddChess={handleAddChess}/>\r\n      </Board>\r\n    </Game>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './cssReset.css'\r\nimport App from './components/App/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}